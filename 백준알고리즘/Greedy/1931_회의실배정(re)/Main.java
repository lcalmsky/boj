
/*
 * [출처]
 * https://www.acmicpc.net/problem/1931
 * 
 * [문제]
 * 한 개의 회의실이 있는데 이를 사용하고자 하는 n개의 회의들에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수
 * 있는 최대수의 회의를 찾아라. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는
 * 시작하자마자 끝나는 것으로 생각하면 된다.
 * 
 * [입력]
 * 첫째 줄에 회의의 수 n(1<=n<=100,000)이 주어진다. 둘째 줄부터 n+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 시작 시간과 끝나는
 * 시간은 231-1보다 작거나 같은 자연수 또는 0이다.
 * 
 * [출력]
 * 첫째 줄에 최대 사용할 수 있는 회의 수를 출력하여라.
 * 
 * [예제 입력]
 * 11
 * 1 4
 * 3 5
 * 0 6
 * 5 7
 * 3 8
 * 5 9
 * 6 10
 * 8 11
 * 8 12
 * 2 13
 * 12 14
 * 
 * [예제 출력]
 * 4
 */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

		int n = Integer.valueOf(in.readLine());

		List<Meeting> meetingList = new ArrayList<>();

		while (n-- > 0) {
			StringTokenizer st = new StringTokenizer(in.readLine());
			Meeting m = new Meeting();
			m.start = Integer.valueOf(st.nextToken());
			m.end = Integer.valueOf(st.nextToken());
			meetingList.add(m);
		}

		Collections.sort(meetingList, new Comparator<Meeting>() {
			@Override
			public int compare(Meeting o1, Meeting o2) {
				return o1.end > o2.end ? 1 : o1.end < o2.end ? -1 : o1.start < o2.start ? -1 : 0;
			}
		});

		int end = 0, cnt = 0;
		for (Meeting meeting : meetingList) {
			if (end <= meeting.start) {
				cnt++;
				end = meeting.end;
			}
		}

		System.out.println(cnt);

		in.close();

	}

}

class Meeting {
	int start, end;
}